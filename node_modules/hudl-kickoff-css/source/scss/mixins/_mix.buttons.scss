// --------------------------------------------
// --------------------------------------------
//
// Mixin :: Buttons
//
// --------------------------------------------
// --------------------------------------------


// TO-DO
// 1. Remove commented out code once we are happy with the spinner variations



// Button Base Placeholder
// --------------------------------------------
%button-base {
  display: inline-block;
  margin: 0;
  border: none;
  border-radius: $btn-radius;
  border: 1px solid transparent;
  overflow: visible;

  background-color: transparent;
  vertical-align: middle;
  font-family: inherit;
  font-weight: $btn-font-weight;
  cursor: pointer;
  text-align: center;

  text-transform: capitalize;
  text-decoration: none;
  -webkit-appearance: none;

  &:hover,
  &:active,
  &:focus,
  &:visited {
    text-decoration: none;
    outline: 0;
  }

  &:disabled,
  &.#{$css-prefix}btn--disabled {
    cursor: default;
  }

}




// Button Spinner Placeholder
// --------------------------------------------
// %btn-spinner {
//   position: relative;
//   width: 1em;
//   height: 1em;
//   position: relative;
//   margin-left: 1.15em;

//   &:before {
//     position: absolute;
//     content: '';
//     width: 1em;
//     height: 1em;
//     // left: (1em/2);
//     left: -1.30em;
//     top: calc(50% - 0.5em);
//   }
// }



// Button Spinner
// --------------------------------------------
@mixin button-spinner(
  $size: $btn-spinner-size,
  $color: green,
  $on-bg: false,
  $spin-target: ko-btn__spinner-container ) {

  .#{$spin-target} {
    position: relative;
    width: $size;
    height: $size;
    position: relative;
    margin-left: ($size + 0.15em);
    &:before {
      position: absolute;
      content: '';
      width: 1em;
      height: 1em;
      // left: (1em/2);
      left: -($size + 0.30em);
       top: calc(50% - (#{$size} / 2) );
      @include css-spinner($size: $size, $bg-color: $color, $on-bg: $on-bg);
    }
  }
}


// Button Disabled
// --------------------------------------------
// Setting disabled state
@mixin button-disabled( $color: $btn-bg-default ) {
  &:disabled,
  &.#{$css-prefix}btn--disabled {
    opacity: 0.7;
    background-color: $color;
    background-image: none;
    border-color: shade($color, 5%);
    // border-color: disabled-contrast($color);
    color: disabled-contrast($color);
    svg { fill: disabled-contrast($color); }
    &:hover {
      opacity: 0.7;
      background-color: $color;
      border-color: shade($color, 5%);
      color: disabled-contrast($color);
    }
    &:focus { background-color: $color; }
  }
}




// Button Size
// --------------------------------------------
// To define different sizes of buttons
@mixin button-size($size: null) {
  // xsmall
  @if $size == 'xsm' {
    font-size: $btn-size-xsmall;
    padding: 0 $btn-pad-small;
    line-height: 1.55em;
  }

  // small
  @else if $size == 'sm' {
    font-size: $btn-size-small;
    padding: 0 $btn-pad-small;
    line-height: 1.75em;
  }

  // medium
  @else if $size == 'med' {
    font-size: $btn-size-medium;
    padding: 0 $btn-pad-medium;
    line-height: 2.25em;
  }

  // large
  @else if $size == 'lg' {
    font-size: $btn-size-large;
    padding: 0 $btn-pad-large;
    line-height: 2.45em;
  }

  // xlarge
   @else if $size == 'xlg' {
    font-size: $btn-size-xlarge;
    padding: 0 $btn-pad-xlarge;
    line-height: 2.85em;
  }

  // default
  @else {
    font-size: $btn-size-medium;
    padding: 0 $btn-pad-medium;
    line-height: 2.25em;
  }
} // button-size




// Button Rounded
// --------------------------------------------
// Used to create a rounded button
@mixin button-circle ( $bg: $btn-bg-default, $size: 0.55em ) {
  @extend %button-base;
  border-radius: 50%;
  padding: $size $size !important;
  box-shadow: none;
  border-color: shade($bg, 5%);
  background-color: $bg;
  // background-image: linear-gradient($bg, shade($bg, 2%));
  color: contrast-color($bg);
  line-height: 0 !important;

  // Hack to reposition icons
  .#{$css-prefix}btn__icon {
    position: relative;
    left: 0.1em;
  }
}




// Button Text
// --------------------------------------------
@mixin button-text ( $color: $btn-text, $active-bg: $btn-text-bg-active ) {
  @extend %button-base;
  @include button-size;
  color: $color;
  transition: $btn-trans;

  // Hover + Focus
  &:hover,
  &:focus { text-decoration: underline; }

  // Active
  &:active {
    background-color: $active-bg;
    text-decoration: none;
  }

  // Disabled
  &:disabled,
  &.#{$css-prefix}btn--disabled {
    color: $btn-text-disabled;
    &:hover { text-decoration: none; }
  }
}




// Button Outline
// --------------------------------------------
@mixin button-outline ( $color: $btn-bg-default, $reverse: null ) {
  @extend %button-base;
  @include button-size;
  @include button-disabled;
  border-color: shade($color, 5%);
  $border-width: 1px;
  $border-style: solid;
  color: $color;
  transition: $btn-trans;
  background-color: transparent;

  // hover
  &:hover {
    border-color: $color;
    color: contrast-color($color);
    // background-color: $color;
    background-color: darken($color, 6%);
  }

  // active
  &:active {
    background-color: darken($color, 10%);
    color: contrast-color($color);
  }

  // disabled
  &:disabled,
  &.#{$css-prefix}btn--disabled {
    // border-color: disabled-contrast($color);
    background-color: transparent;
    &:hover {
      background-color: transparent;
      // color: disabled-contrast($color);
    }
  }

  // &.#{$css-prefix}btn--is-spinning {
  //   .#{$css-prefix}btn__spinner-container {
  //     @extend %btn-spinner;
  //     &:before { @include css-spinner($size: 1em, $bg-color: $color, $on-bg: false); }
  //   }
  //   &:hover {
  //     .#{$css-prefix}btn__spinner-container {
  //       &:before { @include css-spinner($size: 1em, $bg-color: $color, $on-bg: true); }
  //     }
  //   }
  // }

  &.#{$css-prefix}btn--is-spinning {
    // When the button is an outline--reverse variant
    @if ($reverse == true) {
      @include button-spinner($size: $btn-spinner-size, $color: black, $on-bg: true);
    }
    // All other button outlines
    @else {
      @include button-spinner($size: $btn-spinner-size, $color: $color, $on-bg: false);
      // The background changes on hover state for outlines
      &:hover {
        @include button-spinner($size: $btn-spinner-size, $color: $color, $on-bg: true);
      }
    }
  }

}




// Button
// --------------------------------------------
@mixin button( $color: $btn-bg-default ) {

  // Local Variables
  // $btn-shadow:        0.08em 0.05em 0.35em -0.05em rgba(0, 0, 0, 0.2);
  // $btn-shadow-active: 0.125em 0.125em 0.35em -0.05em rgba(0, 0, 0, 0.3);
  $btn_gradient:      rgba(darken($color, 8%), 0.3);

  @extend %button-base;
  @include button-size;
  // @include button-disabled( $color );
  @include button-disabled( $btn-bg-default );
  border-color: shade($color, 5%);
  background-color: $color;
  background-image: linear-gradient($color 25%, $btn_gradient);
  color: contrast-color($color);
  transition: $btn-trans;

  // hover
  &:hover,
  &:focus {
    background-image: none;
    outline: none;
    background-color: darken($color, 6%);
  }

  // active
  &:active { background-color: darken($color, 10%); }

  // &.#{$css-prefix}btn--is-spinning {
  //   .#{$css-prefix}btn__spinner-container {
  //     @extend %btn-spinner;
  //     &:before {
  //       @include css-spinner($size: 1em, $bg-color: $color, $on-bg: true);
  //     }
  //   }
  // }
  &.#{$css-prefix}btn--is-spinning {
    @include button-spinner($size: $btn-spinner-size, $color: $color, $on-bg: true);
  }

} // button
